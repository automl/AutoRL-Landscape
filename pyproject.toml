[build-system]
requires = ["setuptools"]

[project]
name = "autorl_landscape"
description = "AutoRL Landscape"
requires-python = ">=3.10"
license.file = "LICENSE.txt"
version = "0.1"

[project.scripts]
phases = "autorl_landscape.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["autorl_landscape*"]

[tool.pytest.ini_options]
testpaths = ["tests"] # path to the test directory
# addopts = "--cov=autorl_landscape" # Should be package name TODO commented this for vscode debugging pytest as a workaround

# [tool.coverage.run]
# branch = true
# context = "autorl_landscape" # Should be package name
# omit = [
#     "autorl_landscape/__init__.py", # Has variables only needed for setup.py
# ]

# [tool.coverage.report]
# show_missing = true
# skip_covered = true
# exclude_lines = [
#     "pragma: no cover",
#     '\.\.\.',
#     "raise NotImplementedError",
#     "if TYPE_CHECKING",
# ] # These are lines to exclude from coverage

[tool.black]
target-version = ['py310']
line-length = 120

[tool.isort]
py_version = "310"
profile = "black" # Play nicely with black
src_paths = ["autorl_landscape", "tests"]
known_types = ["typing", "abc"] # We put these in their own section "types"
known_test = ["tests"]
known_first_party = ["autorl_landscape"]
sections = [
    "FUTURE",
    "TYPES",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "TEST",
    "LOCALFOLDER",
] # section ordering
multi_line_output = 3 # https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html

[tool.pydocstyle]
convention = "google"
add-ignore = [ # http://www.pydocstyle.org/en/stable/error_codes.html
    "D100", # Missing docstring in public module
    # "D101", # Missing docstring in public class
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__ method
    # "D203", # 1 blank line required before class docstring
    # "D205", # 1 blank line required between summary and description
    # "D210", # No whitespaces allowed surrounding docstring text
    # "D212", # Multi-line docstring summary should start at the first line
    # "D213", # Multi-line docstring summary should start at the second line
    # "D400", # First line should end with a period
    # "D401", # First line should be in imperative mood
    # "D404", # First word of docstring should not be this
    # "D413", # Missing blank line after last section
    # "D415", # First line should end with a period, question mark, or exclamation point
]

[tool.mypy]
python_version = "3.10"
show_error_codes = true
warn_unused_configs = true         # warn about unused [tool.mypy] lines
follow_imports = "normal"          # Type check top level api code we use from imports
ignore_missing_imports = false     # prefer explicit ignores
disallow_untyped_defs = true       # All functions must have types
disallow_untyped_decorators = true # ... even decorators
disallow_incomplete_defs = true    # ... all types
# https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
mypy_path = "typings"
plugins = "numpy.typing.mypy_plugin"

# [[tool.mypy.overrides]]
# module = ["pytest.*"]                # pytest uses decorators which are not typed in 3.8
# disallow_untyped_decorators = false # decorators in testing are not all annotated

[[tool.mypy.overrides]]
module = [
    "autorl_landscape.custom_agents.*",
    "autorl_landscape.ls_models.heteroskedastic_gp",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "matplotlib.*",
    "ConfigSpace",
    "scipy.stats.qmc",
    "tqdm",
    "sklearn.*",
    "tensorflow_probability",
]
ignore_missing_imports = true
